# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:

{
  age.secrets.pocket-id = {
    file = ../secrets/pocket-id.age;
  };
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."pocket-id-pocket-id" = {
    image = "ghcr.io/pocket-id/pocket-id:v1";
    environment = {
      "APP_URL" = "https://pocket.wurt.net";
      "PGID" = "1001";
      "PUID" = "1001";
      "TRUST_PROXY" = "true";
      "ANALYTICS_DISABLED" = "true";
    };
    environmentFiles = [
      config.age.secrets.pocket-id.path
      "/home/pinkfloyd/pocket-id/.env"
      # "/run/agenix/pocket-id"
    ];
    volumes = [
      "/var/lib/pocket-id/:/app/data:rw"
    ];
    ports = [
      "1411:1411/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=[\"/app/pocket-id\", \"healthcheck\"]"
      "--health-interval=1m30s"
      "--health-retries=2"
      "--health-start-period=10s"
      "--health-timeout=5s"
      "--network-alias=pocket-id"
      "--network=pocket-id_default"
    ];
  };
  systemd.services."podman-pocket-id-pocket-id" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-pocket-id_default.service"
    ];
    requires = [
      "podman-network-pocket-id_default.service"
    ];
    partOf = [
      "podman-compose-pocket-id-root.target"
    ];
    wantedBy = [
      "podman-compose-pocket-id-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-pocket-id_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f pocket-id_default";
    };
    script = ''
      podman network inspect pocket-id_default || podman network create pocket-id_default
    '';
    partOf = [ "podman-compose-pocket-id-root.target" ];
    wantedBy = [ "podman-compose-pocket-id-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-pocket-id-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
